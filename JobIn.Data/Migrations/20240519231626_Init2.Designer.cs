// <auto-generated />
using System;
using JobIn.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobIn.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240519231626_Init2")]
    partial class Init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobIn.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9e89340-b3fe-441d-97ac-bbb5351f4252"),
                            ConcurrencyStamp = "a76ba9f9-08e2-4c5b-857d-0b17458ba864",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("348a28d8-f597-4e02-8304-cd0308af29b2"),
                            ConcurrencyStamp = "57b07601-5744-4c92-89ba-b6880964119c",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("4b66714c-4bae-4695-be71-c612af8b84b9"),
                            ConcurrencyStamp = "85b25dc2-df28-45d7-ada8-6b227a15dd2f",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb999521-b4d7-4efc-9d08-95d4631469d5",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hakan",
                            ImageId = new Guid("6a010829-35ba-4c29-ace0-bcea7718672f"),
                            LastName = "Keskin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKpQy5oyornHsZ+BOWKq8G8gMF45iun0HJCUHSTLregBtEVRT1Yl9o/Hts0N2r8LBg==",
                            PhoneNumber = "+905439999999",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "93d06d87-f09f-44c3-b8ac-3f8d52368097",
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66ae2d42-df89-4153-aaa6-6d29dbed54c7",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            ImageId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJyFLedJal4qmueSyQJnPojEpKx8MVRR37MknPpGpSuCfHL3UKa/Khfiue9ppZdwnQ==",
                            PhoneNumber = "+905439999988",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d5b47b8-c285-40af-94e8-00ac7d4d843a",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c"),
                            RoleId = new Guid("e9e89340-b3fe-441d-97ac-bbb5351f4252")
                        },
                        new
                        {
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427"),
                            RoleId = new Guid("348a28d8-f597-4e02-8304-cd0308af29b2")
                        });
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("JobIn.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a010829-35ba-4c29-ace0-bcea7718672f"),
                            IsDeleted = false,
                            Name = "İş İlanı"
                        },
                        new
                        {
                            Id = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            IsDeleted = false,
                            Name = "Staj İlanı"
                        });
                });

            modelBuilder.Entity("JobIn.Entity.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a010829-35ba-4c29-ace0-bcea7718672f"),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            FileName = "images/testimage",
                            FileType = "jpg",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("JobIn.Entity.Entities.JobPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Advert")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deadline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Imagge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobDeadline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("JobPostings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab9c8bb1-166e-491a-908d-0d57e3285961"),
                            Advert = "Çanakkale İli Üniversite Öğrencilerine Yönelik Siber Güvenlik Atölyesi 2024",
                            CategoryId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            CreatedBy = "Btk Akademi",
                            CreatedDate = "24-05-2024",
                            Deadline = "16-04-2024",
                            ImageId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            Imagge = "/JobIn-Post/img/ilan/ilan3.png",
                            IsDeleted = false,
                            JobDeadline = "24-05-2024",
                            JobDescription = "C#, .NetCore, Mvc tercihen React...",
                            JobLocation = "Çanakkale",
                            JobType = "Yüzyüze",
                            Title = "Siber Güvenlik Atolyesi",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        },
                        new
                        {
                            Id = new Guid("7af0a0f8-ba48-4997-852c-4e5599dd28d4"),
                            Advert = "Geleceğini Şekillendir",
                            CategoryId = new Guid("6a010829-35ba-4c29-ace0-bcea7718672f"),
                            CreatedBy = "Cumhurbaşkanlığı Finans Ofisi",
                            CreatedDate = "19-04-2024",
                            Deadline = "02-04-2024",
                            ImageId = new Guid("6a010829-35ba-4c29-ace0-bcea7718672f"),
                            Imagge = "/JobIn-Post/img/ilan/ilan1.png",
                            IsDeleted = false,
                            JobDeadline = "19-04-2024",
                            JobDescription = "Kullanıcı arayüzü tasarımı ve angular kullanarak.....",
                            JobLocation = "Ankara",
                            JobType = "Yüz yüze",
                            Title = "Yarı zamanlı/ stajyer",
                            UserId = new Guid("cb94223b-ccb8-4f2f-93d7-0df96a7f065c")
                        },
                        new
                        {
                            Id = new Guid("8775bed2-3a46-4617-973d-5046dd393b7a"),
                            Advert = "Fark’lı ailemizde yer almak istiyorsan hemen başvur!",
                            CategoryId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            CreatedBy = "Farplas",
                            CreatedDate = "13-05-2024",
                            Deadline = "13-06-2024",
                            ImageId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            Imagge = "/JobIn-Post/img/ilan/ilan4.png",
                            IsDeleted = false,
                            JobDeadline = "23 Haziran",
                            JobDescription = "C#, .NetCore, Mvc tercihen React...",
                            JobLocation = "İstanbul",
                            JobType = "Yüzyüze",
                            Title = "FARK'a Ortak Ol! Uzun Dönem Staj Programı 2024",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        },
                        new
                        {
                            Id = new Guid("893c1862-eea6-4146-a6bd-11fa0f26fd38"),
                            Advert = "Medipol Üniversitesi Teknoloji Transfer Ofisi-Stajyer İlanı",
                            CategoryId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            CreatedBy = "İstanbul Medipol Üniversitesi",
                            CreatedDate = "",
                            Deadline = "",
                            ImageId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            Imagge = "/JobIn-Post/img/ilan/ilan2.png",
                            IsDeleted = false,
                            JobDeadline = "",
                            JobDescription = "C#, .NetCore, Mvc tercihen React...",
                            JobLocation = "İstanbul",
                            JobType = "Yüzyüze",
                            Title = "Teknoloji Transfer Ofisi-Stajyer İlanı",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        },
                        new
                        {
                            Id = new Guid("69803133-ba00-4fe8-9e6d-e986be75c9fc"),
                            Advert = "Fark’lı ailemizde yer almak istiyorsan hemen başvur!",
                            CategoryId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            CreatedBy = "Farplas",
                            CreatedDate = "",
                            Deadline = "",
                            ImageId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            Imagge = "/JobIn-Post/img/ilan/ilan4.png",
                            IsDeleted = false,
                            JobDeadline = "",
                            JobDescription = "C#, .NetCore, Mvc tercihen React...",
                            JobLocation = "İstanbul",
                            JobType = "Yüzyüze",
                            Title = "FARK'a Ortak Ol! Uzun Dönem Staj Programı 2024",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        },
                        new
                        {
                            Id = new Guid("b2475cfd-eb69-43a7-b728-b9ce576f56af"),
                            Advert = "Sky Experience",
                            CategoryId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            CreatedBy = "Türk Havacılık ve Uzay Sanayii",
                            CreatedDate = "",
                            Deadline = "",
                            ImageId = new Guid("b4224b04-73b7-4077-af1e-81e16a37de65"),
                            Imagge = "/JobIn-Post/img/ilan/ilan5.jpg",
                            IsDeleted = false,
                            JobDeadline = "",
                            JobDescription = "C#, .NetCore, Mvc tercihen React...",
                            JobLocation = "İstanbul",
                            JobType = "Yüzyüze",
                            Title = "SKY Global Türk Programı",
                            UserId = new Guid("3aa42229-1c0f-4630-8c1a-db879ecd0427")
                        });
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("JobIn.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUser", b =>
                {
                    b.HasOne("JobIn.Entity.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("JobIn.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("JobIn.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("JobIn.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobIn.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("JobIn.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobIn.Entity.Entities.JobPosting", b =>
                {
                    b.HasOne("JobIn.Entity.Entities.Category", "Category")
                        .WithMany("Postings")
                        .HasForeignKey("CategoryId");

                    b.HasOne("JobIn.Entity.Entities.Image", "Image")
                        .WithMany("Postings")
                        .HasForeignKey("ImageId");

                    b.HasOne("JobIn.Entity.Entities.AppUser", "User")
                        .WithMany("Postings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobIn.Entity.Entities.AppUser", b =>
                {
                    b.Navigation("Postings");
                });

            modelBuilder.Entity("JobIn.Entity.Entities.Category", b =>
                {
                    b.Navigation("Postings");
                });

            modelBuilder.Entity("JobIn.Entity.Entities.Image", b =>
                {
                    b.Navigation("Postings");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
